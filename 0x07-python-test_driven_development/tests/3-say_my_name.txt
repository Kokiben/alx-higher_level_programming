Utilize ``3-say_my_name`` module
======================

Usage ``say_my_name``
-------------------

including function from module:
	>>> say_my_name = __import__("3-say_my_name").say_my_name

Verify for module docstring:
	 >>> j = __import__("3-say_my_name").__doc__
	 >>> len(j) > 1
	 True

Verify for function docstring:
	 >>> n = __import__("3-say_my_name").say_my_name.__doc__
         >>> len(n) > 1
         True

Verify for passing None as first name:
	 >>> say_my_name(None, "kaout")
	 Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Verify for passing None as last name:
	 >>> say_my_name("kaout", None)
	 Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Verify for wrong type as first name:
         >>> say_my_name(1, "benna")
         Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Verify for wrong type as last name:
         >>> say_my_name("kaout", [4])
         Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Verify for normal use:
	 >>> say_my_name("kaout", "benna")
	 My name is kaout benna
	 >>> say_my_name("You are best", "Bob Smith")
	 My name is You are best Bob Smith

Verify for one arg:
	 >>> say_my_name("kaout")
	 My name is kaout 

Verify for more than two args:
	 >>> say_my_name("kaout", "benna", "si")
	 Traceback (most recent call last):
	 ...
	 TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
