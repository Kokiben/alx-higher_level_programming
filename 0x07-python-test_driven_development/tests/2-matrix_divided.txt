==============================
Utilize 2-matrix_divided.py
==============================

Defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix that is a copie of the variable
``matrix`` with all items divided by ``div``.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [4, 8, 12],
    ...     [16, 20, 24]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Keep in mind that results are rounded to a maximum of two decimal places.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[0.25, 0.5, 0.75], [1.0, 1.25, 1.5]]

The initial matrix is remains unaltered.

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

The function can also capable of processing! floating-point numbers.

::

    >>> matrix = [
    ...     [-1.1, 2.2, 3.3],
    ...     [4.4, -5.5, 6.6]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[-0.28, 0.55, 0.83], [1.1, -1.38, 1.65]]

Integers and floats can be merged.

::

    >>> matrix = [
    ...     [1, -2, 3.3, 4.4, 5.5],
    ...     [-6, 7.00, -8, 9, 10.10]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[0.25, -0.5, 0.83, 1.1, 1.4], [-1.5, 1.75, -2.0, 2.25, 2.53]]

improper Matrices
==============

The variable ``matrix`` must be a list of lists consisting of either integers or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Please be aware that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

However, an empty list of lists will meet the criteria.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

The same  TypeError is raised if ``matrix`` is not precisely a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

A similar TypeError is raised once more any elements in ``matrix`` are
not integers or floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Concluded, all rows in ``matrix`` must be the same size. If any rows are
of unequal sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

improper Divisors
================

The variable ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
