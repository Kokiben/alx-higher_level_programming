
Experiment 1-my_list.py
-------------------------------------------

Situation 0: import
>>> MyList = __import__('1-my_list').MyList
>>>
-------------------------------------------

Situation 1: common case

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
>>>

-------------------------------------------

Situation 2: not defined object

>>> MyList = __import__('1-my_list').MyList
>>> my_list2.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_list2' is not defined
>>>

-------------------------------------------

Situation 3: passed a list

>>> a = [1, 9, 4]
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[1, 4, 9]
>>>

-------------------------------------------

Situation 4: empty list

>>> a = []
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[]
>>>

-------------------------------------------

Situation 5: unique number

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.print_sorted()
[1]
>>> print(my_list)
[1]
>>>

-------------------------------------------

Situation 6: same number

>>> my_list2 = MyList()
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.print_sorted()
[1, 1, 1, 1]
>>>

-------------------------------------------

Situation 7: parent object
>>> my_list = [1, 2, 3]
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'print_sorted'
>>>

-------------------------------------------

Situation 8: negative numbers

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(51)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -1, 1, 5, 51]
>>>

-------------------------------------------

Situation 9: mixed types

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append("two")
>>> my_list.append(3.0)
>>> my_list.append("four")
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '<' not supported between instances of 'str' and 'int'
>>>

-------------------------------------------

Situation 10: non-numeric types

>>> my_list = MyList()
>>> my_list.append("one")
>>> my_list.append("two")
>>> my_list.append("three")
>>> my_list.print_sorted()
['one', 'three', 'two']
>>>

-------------------------------------------

Situation 11: numeric types excluding integers

>>> my_list = MyList()
>>> my_list.append(4.4)
>>> my_list.append(5.5)
>>> my_list.append(6.6)
>>> my_list.print_sorted()
[4.4, 5.5, 6.6]
>>>

-------------------------------------------

Situation 12: numbers with considerable magnitude

>>> my_list = MyList()
>>> my_list.append(4000000)
>>> my_list.append(5000000)
>>> my_list.append(6000000)
>>> my_list.print_sorted()
[4000000, 5000000, 6000000]
>>>

-------------------------------------------

Situation 13: numbers including positive and negative

>>> my_list = MyList()
>>> my_list.append(-2)
>>> my_list.append(2)
>>> my_list.print_sorted()
[-2, 2]
>>>

-------------------------------------------

Situation 14: numbers including zero and positive

>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(2)
>>> my_list.print_sorted()
[0, 2]
>>>

-------------------------------------------

Situation 15: numbers including zero and negative

>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(-2)
>>> my_list.print_sorted()
[-2, 0]
>>>
